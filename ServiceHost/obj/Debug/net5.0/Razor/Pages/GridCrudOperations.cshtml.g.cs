#pragma checksum "G:\DotNetCore\SanaDotNetCore\SanaDotNet\ServiceHost\Pages\GridCrudOperations.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f53234b152d0722b40468b79abf930eed05cc8a2"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(ServiceHost.Pages.Pages_GridCrudOperations), @"mvc.1.0.razor-page", @"/Pages/GridCrudOperations.cshtml")]
namespace ServiceHost.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 9 "G:\DotNetCore\SanaDotNetCore\SanaDotNet\ServiceHost\Pages\GridCrudOperations.cshtml"
using ServiceHost;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "G:\DotNetCore\SanaDotNetCore\SanaDotNet\ServiceHost\Pages\GridCrudOperations.cshtml"
using Kendo.Mvc.UI;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "G:\DotNetCore\SanaDotNetCore\SanaDotNet\ServiceHost\Pages\GridCrudOperations.cshtml"
using JobManagement.Application.Contracts.QorbMoasPor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "G:\DotNetCore\SanaDotNetCore\SanaDotNet\ServiceHost\Pages\GridCrudOperations.cshtml"
using System.Collections;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f53234b152d0722b40468b79abf930eed05cc8a2", @"/Pages/GridCrudOperations.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5f1dc0cf3c651edca1d55dc1ad49e15a18462a67", @"/Pages/_ViewImports.cshtml")]
    public class Pages_GridCrudOperations : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "G:\DotNetCore\SanaDotNetCore\SanaDotNet\ServiceHost\Pages\GridCrudOperations.cshtml"
  
    ViewData["Title"] = "GridCrudOperations";

#line default
#line hidden
#nullable disable
            WriteLiteral("\n<h1>GridCrudOperations</h1>\n\n");
            WriteLiteral("\n");
#nullable restore
#line 15 "G:\DotNetCore\SanaDotNetCore\SanaDotNet\ServiceHost\Pages\GridCrudOperations.cshtml"
Write(Html.AntiForgeryToken());

#line default
#line hidden
#nullable disable
            WriteLiteral("\n\n");
#nullable restore
#line 17 "G:\DotNetCore\SanaDotNetCore\SanaDotNet\ServiceHost\Pages\GridCrudOperations.cshtml"
Write(Html.Kendo().Grid<QorbMoasPorViewModel>().Name("grid")
                .Groupable()
                .Sortable()
               //.Editable()
               //.Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("_EditGridCrudOperations").Window(x => x.Width(550).Height(800)))
               .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("Template").Window(x => x.Width(550).Height(800)))

                .Scrollable()
                .ToolBar(x => {
                    x.Create();
                    x.Excel();
                })
                .Columns(columns =>
                {
                    columns.Bound(column => column.Id);
                    columns.Bound(column => column.CreationDate).Format("{0:dd MMMM yyyy}");
                    columns.Bound(column => column.QorbMoasPorId_sana);
                    columns.Bound(column => column.QorbMoas);
                    columns.Bound(column => column.Name);
                    //columns.ForeignKey(column => column.QorbId, (IEnumerable)@Model.Qorbs, "Id", "Name").Title("QorbId");
                    columns.Bound(column => column.QorbId);
                    columns.Command(column =>
                    {
                        column.Edit();
                        column.Destroy();
                    });
                })
                 .Excel(excel => excel
                            .FileName("Export.xlsx")
                            .Filterable(true)
                            .ProxyURL("/GridCrudOperations?handler=Save")
                        )
                .DataSource(ds => ds.Ajax()
                       .Read(r => r.Url("/GridCrudOperations?handler=Read").Data("forgeryToken"))
                       .Update(u => u.Url("/GridCrudOperations?handler=Update").Data("forgeryToken"))
                       //.Update(u => u.Url("/Edit").Data("forgeryToken"))
                       .Create(c => c.Url("/GridCrudOperations?handler=Create").Data("forgeryToken"))
                       .Destroy(d => d.Url("/GridCrudOperations?handler=Destroy").Data("forgeryToken"))
                       .Model(m =>
                       {
                           m.Id(id => id.Id);
                           m.Field(f => f.Id).Editable(false);
                           m.Field(m => m.QorbId).DefaultValue(-1);

                       })
                       .Events(events => events.Error("grid_error")) // Handle the "error" event.
                    .PageSize(10)
                )
                .Pageable()

    .Events(e => e.Edit("onEdit"))

);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"

<br/>
<br />



<script>
    function forgeryToken() {
        return kendo.antiForgeryTokens();
    }

    function grid_error(e) {
        var errors = e.errors;
        if (errors) {
            var grid = $(""#grid"").data(""kendoGrid"");
            grid.one(""dataBinding"", function (e) {
                e.preventDefault();
                $.each(errors, function (key, value) {
                    var message = """";
                    if ('errors' in value) {
                        $.each(value.errors, function () {
                            message += this + ""\n"";
                        });
                    }

                    // As long as the key matches the field name, this line of code will be displayed as validation message in the popup.
                    grid.editable.element.find(""[data-valmsg-for='"" + key + ""']"").replaceWith('<div class=""k-tooltip k-tooltip-error k-validator-tooltip k-invalid-msg field-validation-error"" ><span class=""k-tooltip-icon k-icon k-i-warning""></span><span class");
            WriteLiteral(@"=""k-tooltip-content"">' + message + '</span><span class=""k-callout k-callout-n""></span></div>').show();
                });
            });
        }
    }
    function onEdit(e) {
        /*if (e.model.isNew()) {*/
        e.container.kendoWindow(""title"", ""ویرایش اطلاعات"");
        e.container.find("".k-grid-update"").contents()[1].textContent = ""ویرایش"";
       /* var row = e.currentTarget;*/
        /*alert(row);*/
       /* var selectedItem = grid.data(""kendoGrid"").dataItem(row);*/
        /*alert(selectedItem);*/

");
            WriteLiteral("        //}\n    }\n</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<GridCrudOperationsModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<GridCrudOperationsModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<GridCrudOperationsModel>)PageContext?.ViewData;
        public GridCrudOperationsModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
